name: Deploy pipeline

on:
  pull_request:
    branches: [ "main" ]
    # types: [opened, synchronize, reopened, edited] # Trigger only on relevant PR events

permissions:
  contents: write
  pull-requests: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      - name: Run tests
        run: |
          python -m pytest tests/ -v --cov=src --cov-report=term-missing > pytest_output.txt || true
      - name: Create Test Results comment
        uses: actions/github-script@v6
        env:
          TEST_OUTPUT: ${{ github.workspace }}/pytest_output.txt
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync(process.env.TEST_OUTPUT, 'utf8');
            
            if (context.payload.pull_request == null) {
              console.log("Not a pull request, skipping commenting");
              return;
            }

            const pull_request_number = context.payload.pull_request.number;
            
            // Extract test summary
            const totalTests = (output.match(/collected\s+(\d+)\s+items/)||[])[1] || 0;
            const passedTests = (output.match(/(\d+)\s+passed/)||[])[1] || 0;
            const failedTests = (output.match(/(\d+)\s+failed/)||[])[1] || 0;
            const skippedTests = (output.match(/(\d+)\s+skipped/)||[])[1] || 0;
            
            // Extract coverage
            const coverageMatch = output.match(/TOTAL\s+(\d+\s+\d+\s+(\d+%)\s+\d+\s+\d+)/);
            const coverage = coverageMatch ? coverageMatch[2] : 'N/A';
            
            let commentBody = `## Test Results\n\n`;
            
            // Add summary table
            commentBody += `### Summary\n\n`;
            commentBody += `| Metric | Count |\n`;
            commentBody += `|--------|-------|\n`;
            commentBody += `| Total Tests | ${totalTests} |\n`;
            commentBody += `| Passed | ${passedTests} :white_check_mark: |\n`;
            commentBody += `| Failed | ${failedTests} ${failedTests > 0 ? ':x:' : ''} |\n`;
            commentBody += `| Skipped | ${skippedTests} ${skippedTests > 0 ? ':warning:' : ''} |\n`;
            commentBody += `| Coverage | ${coverage} |\n\n`;
            
            // Add detailed output in collapsible section
            commentBody += `<details><summary>Detailed Test Output</summary>\n\n\`\`\`text\n${output}\n\`\`\`\n</details>\n`;
            
            // Add overall status
            if (failedTests > 0) {
              commentBody += '\n\n:x: **Tests failed - please fix the failing tests**';
            } else if (skippedTests > 0) {
              commentBody += '\n\n:warning: **All tests passed but some were skipped**';
            } else {
              commentBody += '\n\n:white_check_mark: **All tests passed successfully!**';
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pull_request_number,
              body: commentBody
            });
  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get the changed files
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest
      - name: Get changed files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMR ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '\.py$' | tr '\n' ' ')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_OUTPUT
      - name: Run Pylint on changed files
        # if: steps.changed-files.outputs.CHANGED_FILES != ''
        run: |
          CHANGED_FILES="${{ steps.changed-files.outputs.CHANGED_FILES }}"
          echo "$(python -m pylint $CHANGED_FILES > pylint_output.txt)"
          echo "Pylint ran on: $CHANGED_FILES"
          echo "Result:"
          echo "RESULT=$(cat pylint_output.txt)"
          echo "$RESULT"
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
      - name: Create Pylint comment
        if: steps.changed-files.outputs.CHANGED_FILES != ''
        uses: actions/github-script@v6
        env:
          PYLINT_OUTPUT: ${{ github.workspace }}/pylint_output.txt
        with:
          script: |
            const fs = require('fs');
            const output = fs.readFileSync(process.env.PYLINT_OUTPUT, 'utf8');

            if (context.payload.pull_request == null) {
              console.log("Not a pull request, skipping commenting");
              return;
            }

            const pull_request_number = context.payload.pull_request.number;

            let commentBody = `## Pylint Report\n\n<details><summary>Details of Pylint Run</summary>\n\n\`\`\`text\n${output}\n\`\`\`\n</details>\n`;

            // Summarize the report (example: count errors/warnings)
            const errorCount = (output.match(/E\d+:/g) || []).length;
            const warningCount = (output.match(/W\d+:/g) || []).length;
            const refactorCount = (output.match(/R\d+:/g) || []).length;
            const conventionCount = (output.match(/C\d+:/g) || []).length;

            const errorSymbol = errorCount > 0 ? ':x:' : ':white_check_mark:';
            const warningSymbol = warningCount > 0 ? ':x:' : ':white_check_mark:';
            const refactorSymbol = refactorCount > 0 ? ':x:' : ':white_check_mark:';
            const conventionSymbol = conventionCount > 0 ? ':x:' : ':white_check_mark:';

            commentBody += `\n\n**Summary:**\n\n| Type       | Check | Number |\n|------------|-------|--------|\n| Errors     | ${errorSymbol} | ${errorCount} |\n| Warnings   | ${warningSymbol} | ${warningCount} |\n| Refactor   | ${refactorSymbol} | ${refactorCount} |\n| Convention | ${conventionSymbol} | ${conventionCount} |\n`;

            if (errorCount > 0) {
                commentBody += "\n\n:red_circle: **Please address the errors reported by Pylint.**";
            } else if (warningCount > 0 || refactorCount > 0 || conventionCount > 0) {
                commentBody += "\n\n:warning: **Consider addressing the warnings reported by Pylint.**";
            } else {
                commentBody += "\n\n:white_check_mark: **Pylint found no errors or warnings.**";
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pull_request_number,
              body: commentBody
            });
      - name: No files changed message
        if: steps.changed-files.outputs.CHANGED_FILES == ''
        run: echo "No Python files changed, skipping Pylint."