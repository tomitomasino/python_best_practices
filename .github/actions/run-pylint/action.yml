name: 'Run Pylint'
description: 'Run Pylint on changed Python files and create a report'

inputs:
  base_sha:
    description: 'Base SHA for comparing changes'
    required: true
  head_sha:
    description: 'Head SHA for comparing changes'
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pytest

    - name: Get changed files
      id: changed-files
      shell: bash
      run: |
        set -x  # Enable debug mode to see commands being executed
        
        echo "DEBUG: Base SHA = $INPUTS_BASE_SHA"
        echo "DEBUG: Head SHA = $INPUTS_HEAD_SHA"
        
        echo "DEBUG: Running git diff command..."
        echo "git diff --name-only --diff-filter=AMR $INPUTS_BASE_SHA $INPUTS_HEAD_SHA"
        
        # Show the raw diff output
        echo "DEBUG: Raw diff output:"
        git diff --name-only --diff-filter=AMR "$INPUTS_BASE_SHA" "$INPUTS_HEAD_SHA"
        
        # Get the changed files
        CHANGED_FILES=$(git diff --name-only --diff-filter=AMR "$INPUTS_BASE_SHA" "$INPUTS_HEAD_SHA" | grep '\.py$' | tr '\n' ' ')
        
        # Show the files before trimming
        echo "DEBUG: Files before trim: [$CHANGED_FILES]"
        
        # Trim leading/trailing whitespace
        CHANGED_FILES="$(echo "$CHANGED_FILES" | xargs)"
        
        echo "DEBUG: Final CHANGED_FILES value: [$CHANGED_FILES]"
        echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_OUTPUT
        
        # Also print the contents of GITHUB_OUTPUT for verification
        echo "DEBUG: Contents of GITHUB_OUTPUT:"
        cat $GITHUB_OUTPUT
      env:
        INPUTS_BASE_SHA: ${{ inputs.base_sha }}
        INPUTS_HEAD_SHA: ${{ inputs.head_sha }}

    - name: Run Pylint on changed files
      if: steps.changed-files.outputs.CHANGED_FILES != ''
      shell: bash
      run: |
        set -x
        CHANGED_FILES="${{ steps.changed-files.outputs.CHANGED_FILES }}"
        echo "$(python -m pylint $CHANGED_FILES > pylint_output.txt)"
        echo "Pylint ran on: $CHANGED_FILES"
        echo "Result:"
        echo "RESULT=$(cat pylint_output.txt)"
        echo "$RESULT"
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.CHANGED_FILES }}
        PYTHONPATH: ${{ github.workspace }}

    - name: Create Pylint comment
      if: steps.changed-files.outputs.CHANGED_FILES != ''
      uses: actions/github-script@v6
      env:
        PYLINT_OUTPUT: ${{ github.workspace }}/pylint_output.txt
      with:
        script: |
          const fs = require('fs');
          const output = fs.readFileSync(process.env.PYLINT_OUTPUT, 'utf8');

          if (context.payload.pull_request == null) {
            console.log("Not a pull request, skipping commenting");
            return;
          }

          const pull_request_number = context.payload.pull_request.number;

          // Summarize the report
          const errorCount = (output.match(/E\d+:/g) || []).length;
          const warningCount = (output.match(/W\d+:/g) || []).length;
          const refactorCount = (output.match(/R\d+:/g) || []).length;
          const conventionCount = (output.match(/C\d+:/g) || []).length;

          const errorSymbol = errorCount > 0 ? ':x:' : ':white_check_mark:';
          const warningSymbol = warningCount > 0 ? ':x:' : ':white_check_mark:';
          const refactorSymbol = refactorCount > 0 ? ':x:' : ':white_check_mark:';
          const conventionSymbol = conventionCount > 0 ? ':x:' : ':white_check_mark:';

          let commentBody = `\n\n## Pylint Report\n\n| Type | Check | Count |\n|------|-------|--------|\n| Errors | ${errorSymbol} | ${errorCount} |\n| Warnings | ${warningSymbol} | ${warningCount} |\n| Refactor | ${refactorSymbol} | ${refactorCount} |\n| Convention | ${conventionSymbol} | ${conventionCount} |\n`;
          commentBody += `\n\n<details><summary>Details of Pylint Run</summary>\n\n\`\`\`text\n${output}\n\`\`\`\n</details>\n`;

          if (errorCount > 0) {
              commentBody += "\n\n:red_circle: **Please address the errors reported by Pylint.**";
          } else if (warningCount > 0 || refactorCount > 0 || conventionCount > 0) {
              commentBody += "\n\n:warning: **Consider addressing the warnings reported by Pylint.**";
          } else {
              commentBody += "\n\n:white_check_mark: **Pylint found no errors or warnings.**";
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pull_request_number,
            body: commentBody
          });

    - name: No files changed message
      if: steps.changed-files.outputs.CHANGED_FILES == ''
      shell: bash
      run: echo "No Python files changed, skipping Pylint."